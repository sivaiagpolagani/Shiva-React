***************================================*********************

Export in 2 ways:
  1) Default export (export default name)
  2) Named Export   (export conat LOGO_URL="fghfkg.jpg")

Import 2 ways:
  1) import RestaurantCard from "./RestaurantCard";
  2) import { CDN_URL } from "../../utils/constants";

***************================================*********************

React Hooks:

(Normal JS utility functions)
- useState() - Superpowerful state react variable
- useEffect()

Whenever state variable changes, React will re-render the component.

***************================================*********************

React uses reconcilation algorithem also known as React Fibre.
https://github.com/acdlite/react-fiber-architecture

Virtual DOM is a reprasentation of actual DOM.
Virtual DOM is a object which was console in JSX.

Diff one three Algorithem.

What is reconciliation?
reconciliation
The algorithm React uses to diff one tree with another to determine which parts need to be changed.

update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

Actually re-rendering the entire app on each change only works for the most trivial apps; in a real-world app, 
it's prohibitively costly in terms of performance. React has optimizations which create the appearance of whole app 
re-rendering while maintaining great performance. The bulk of these optimizations are part of a process called reconciliation.

Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM." 
A high-level description goes something like this: when you render a React application, a tree of nodes that describes 
the app is generated and saved in memory. This tree is then flushed to the rendering environment — 
for example, in the case of a browser application, it's translated to a set of DOM operations. When the app is updated 
(usually via setState), a new tree is generated. The new tree is diffed with the previous tree to compute which operations are needed to update the rendered app.

Although Fiber is a ground-up rewrite of the reconciler, the high-level algorithm described in the React docs will be largely the same. The key points are:

Different component types are assumed to generate substantially different trees. React will not attempt to diff them, but rather replace the old tree completely.
Diffing of lists is performed using keys. Keys should be "stable, predictable, and unique."

***************================================*********************

Reconciliation versus rendering

The DOM is just one of the rendering environments React can render to, the other major targets being native iOS and 
Android views via React Native. (This is why "virtual DOM" is a bit of a misnomer.)

The reason it can support so many targets is because React is designed so that reconciliation and rendering are 
separate phases. The reconciler does the work of computing which parts of a tree have changed; 
the renderer then uses that information to actually update the rendered app.

This separation means that React DOM and React Native can use their own renderers while sharing the same reconciler, 
provided by React core.

Fiber reimplements the reconciler. It is not principally concerned with rendering, though renderers will need to 
change to support (and take advantage of) the new architecture.

***************================================*********************

The key points are:

In a UI, it's not necessary for every update to be applied immediately; 
in fact, doing so can be wasteful, causing frames to drop and degrading the user experience.

Different types of updates have different priorities — an animation update needs to complete more quickly than, say,
an update from a data store.

A push-based approach requires the app (you, the programmer) to decide how to schedule work. 
A pull-based approach allows the framework (React) to be smart and make those decisions for you.

React doesn't currently take advantage of scheduling in a significant way; an update results in the entire subtree 
being re-rendered immediately. Overhauling React's core algorithm to take advantage of scheduling is the driving 
idea behind Fiber.

***************================================*********************

What is a fiber?

We've established that a primary goal of Fiber is to enable React to take advantage of scheduling. Specifically, we need to be able to

1) pause work and come back to it later.
2) assign priority to different types of work.
3) reuse previously completed work.
4) abort work if it's no longer needed.

The way computers typically track a program's execution is using the call stack. When a function is executed, 
a new stack frame is added to the stack. That stack frame represents the work that is performed by that function.

Newer browsers (and React Native) implement APIs that help address this exact problem: requestIdleCallback schedules 
a low priority function to be called during an idle period, and requestAnimationFrame schedules a high priority 
function to be called on the next animation frame. The problem is that, in order to use those APIs, you need a way 
to break rendering work into incremental units. If you rely only on the call stack, it will keep doing work until 
the stack is empty.

Wouldn't it be great if we could customize the behavior of the call stack to optimize for rendering UIs? Wouldn't 
it be great if we could interrupt the call stack at will and manipulate stack frames manually?

That's the purpose of React Fiber. Fiber is reimplementation of the stack, specialized for React components. 
You can think of a single fiber as a virtual stack frame.

The advantage of reimplementing the stack is that you can keep stack frames in memory and execute them however 
(and whenever) you want. This is crucial for accomplishing the goals we have for scheduling.



